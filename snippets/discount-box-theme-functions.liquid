{%- comment -%}
  Theme-specific functions for discount box cart UI updates
  This file contains functions that are specific to this theme's cart system
  and should be replaced when using this discount box in other themes.
{%- endcomment -%}

<script>
// Ensure function is in global scope
window.refreshThemeCart = function() {
  console.log('refreshThemeCart function called!');
  
  if (typeof updateCartCounters === 'function') {
    console.log('Calling updateCartCounters...');
    updateCartCounters();
  } else {
    console.log('updateCartCounters function not found');
  }
  
  if (typeof updateFreeShipping === 'function') {
    console.log('Calling updateFreeShipping...');
    updateFreeShipping();
  } else {
    console.log('updateFreeShipping function not found');
  }
  
  const cartDrawer = document.querySelector('cart-drawer');
  console.log('Cart drawer found:', !!cartDrawer);
  console.log('Cart drawer is visible:', cartDrawer && cartDrawer.classList.contains('is-visible'));
  
  if (cartDrawer && cartDrawer.classList.contains('is-visible')) {
    const cartDrawerItems = document.querySelector('cart-drawer-items');
    console.log('Cart drawer items found:', !!cartDrawerItems);
    
    if (cartDrawerItems) {
      cartDrawerItems.classList.add('is-loading');
      
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          console.log('Cart data fetched:', cart);
          const firstQuantityInput = cartDrawerItems.querySelector('input[name="updates[]"]');
          console.log('First quantity input found:', !!firstQuantityInput);
          
          if (firstQuantityInput) {
            const currentQuantity = firstQuantityInput.value;
            const currentIndex = firstQuantityInput.dataset.index;
            console.log('Current quantity:', currentQuantity, 'Current index:', currentIndex);
            
            const cartItems = document.querySelector('cart-items') || document.querySelector('cart-drawer-items');
            console.log('Cart items element found:', !!cartItems);
            console.log('Cart items updateQuantity function exists:', cartItems && typeof cartItems.updateQuantity === 'function');
            
            if (cartItems && typeof cartItems.updateQuantity === 'function') {
              console.log('Calling cartItems.updateQuantity...');
              cartItems.updateQuantity(currentIndex, currentQuantity, 'updates[]');
            }
          }
          
          cartDrawerItems.classList.remove('is-loading');
          
          setTimeout(() => {
            if (typeof loadAppliedDiscounts === 'function') {
              console.log('Calling loadAppliedDiscounts...');
              loadAppliedDiscounts();
            } else {
              console.log('loadAppliedDiscounts function not found');
            }
          }, 500);
        })
        .catch(error => {
          console.error('Error updating cart items:', error);
          cartDrawerItems.classList.remove('is-loading');
        });
    }
  }
  
  setTimeout(() => {
    if (typeof initDiscountBox === 'function') {
      console.log('Calling initDiscountBox...');
      initDiscountBox();
    } else {
      console.log('initDiscountBox function not found');
    }
    setTimeout(() => {
      if (typeof loadAppliedDiscounts === 'function') {
        console.log('Calling loadAppliedDiscounts again...');
        loadAppliedDiscounts();
      } else {
        console.log('loadAppliedDiscounts function not found (second call)');
      }
    }, 100);
  }, 200);
  
  console.log('refreshThemeCart function completed');
};

// Also define it directly for backward compatibility
function refreshThemeCart() {
  return window.refreshThemeCart();
}
</script> 