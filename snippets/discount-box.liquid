<div class="discount-box{% if class %} {{ class }}{% endif %}">
  <form id="DiscountForm" autocomplete="off">
    <label for="discount-code" class="discount-box__label">Aplicar código de desconto</label>
    <div class="discount-box__input-group">
      <input type="text" id="discount-code" name="discount" class="discount-box__input" placeholder="Código de desconto" required>
      <button type="submit" class="discount-box__button">Aplicar</button>
    </div>
    <div id="DiscountMessage" class="discount-box__message" style="display:none;"></div>
  </form>
  
  <!-- Applied Discounts Display -->
  <div id="AppliedDiscounts" class="discount-box__applied-discounts" style="display:none;">
    <h4 class="discount-box__applied-title">Descontos aplicados:</h4>
    <div id="AppliedDiscountsList" class="discount-box__applied-list"></div>
  </div>
</div>

<script>
(function() {
  function initDiscountBox() {
    var form = document.getElementById('DiscountForm');
    var input = document.getElementById('discount-code');
    var message = document.getElementById('DiscountMessage');
    var appliedDiscounts = document.getElementById('AppliedDiscounts');
    var appliedDiscountsList = document.getElementById('AppliedDiscountsList');
    
    if (!form || !input) return;
    
    // Remove existing event listeners
    form.removeEventListener('submit', handleSubmit);
    
    // Add event listeners
    form.addEventListener('submit', handleSubmit);
    
    // Load current applied discounts
    loadAppliedDiscounts();
    
    function handleSubmit(e) {
      e.preventDefault();
      var code = input.value.trim();
      if (!code) return;
      
      message.style.display = 'none';
      message.textContent = '';
      form.classList.add('is-loading');
      
      fetch('/cart/update.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify({ discount: code })
      })
      .then(function(res) { 
        if (!res.ok) {
          throw new Error('Network response was not ok');
        }
        return res.json(); 
      })
      .then(function(data) {
        if (data.status && data.status !== 200) {
          throw new Error(data.description || 'Error applying discount');
        }
        
        message.textContent = 'Desconto aplicado!';
        message.style.display = 'block';
        message.className = 'discount-box__message discount-box__message--success';
        
        // Clear input
        input.value = '';
        
        // Refresh cart and applied discounts
        refreshCart();
      })
      .catch(function(err) {
        message.textContent = err.message || 'Não foi possível aplicar o desconto.';
        message.style.display = 'block';
        message.className = 'discount-box__message discount-box__message--error';
      })
      .finally(function() {
        form.classList.remove('is-loading');
      });
    }
    
    function loadAppliedDiscounts() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          console.log('Cart data:', cart); // Debug log
          if (cart.cart_level_discount_applications && cart.cart_level_discount_applications.length > 0) {
            displayAppliedDiscounts(cart.cart_level_discount_applications);
          } else {
            hideAppliedDiscounts();
          }
        })
        .catch(error => {
          console.error('Error loading applied discounts:', error);
        });
    }
    
    function displayAppliedDiscounts(discounts) {
      console.log('Displaying discounts:', discounts); // Debug log
      appliedDiscountsList.innerHTML = '';
      
      discounts.forEach(discount => {
        const discountItem = document.createElement('div');
        discountItem.className = 'discount-box__applied-item';
        discountItem.innerHTML = `
          <span class="discount-box__applied-code">${discount.title}</span>
          <button type="button" class="discount-box__remove-discount" data-discount-code="${discount.title}">×</button>
        `;
        
        // Add remove event listener
        const removeBtn = discountItem.querySelector('.discount-box__remove-discount');
        removeBtn.addEventListener('click', function() {
          removeDiscount(discount.title);
        });
        
        appliedDiscountsList.appendChild(discountItem);
      });
      
      appliedDiscounts.style.display = 'block';
    }
    
    function hideAppliedDiscounts() {
      appliedDiscounts.style.display = 'none';
    }
    
    function removeDiscount(discountCode) {
      // Remove discount by setting it to empty string
      fetch('/cart/update.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify({ discount: '' })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status && data.status !== 200) {
          throw new Error(data.description || 'Error removing discount');
        }
        
        // Refresh cart and applied discounts
        refreshCart();
      })
      .catch(error => {
        console.error('Error removing discount:', error);
        message.textContent = 'Erro ao remover desconto.';
        message.style.display = 'block';
        message.className = 'discount-box__message discount-box__message--error';
      });
    }
    
    function refreshCart() {
      // Use the same mechanism as the cart system
      const sectionsToRender = [];
      const cartDrawer = document.querySelector('cart-drawer');
      
      if (cartDrawer) {
        const mainCartId = document.getElementById('main-cart-items')?.dataset.id;
        if (mainCartId) {
          sectionsToRender.push(
            { id: `#shopify-section-${mainCartId}`, section: mainCartId, selector: `#shopify-section-${mainCartId} cart-items` },
            { id: "#cart-counter", section: "cart-counter", selector: "#shopify-section-cart-counter" },
            { id: "#CartDrawer-Body", section: "cart-drawer", selector: "#shopify-section-cart-drawer #CartDrawer-Body" }
          );
        } else {
          sectionsToRender.push(
            { id: "#CartDrawer-Body", section: "cart-drawer", selector: "#shopify-section-cart-drawer #CartDrawer-Body" }
          );
        }
      } else {
        const mainCartId = document.getElementById('main-cart-items')?.dataset.id;
        if (mainCartId) {
          sectionsToRender.push(
            { id: `#shopify-section-${mainCartId}`, section: mainCartId, selector: `#shopify-section-${mainCartId} cart-items` },
            { id: '#cart-counter', section: 'cart-counter', selector: '#shopify-section-cart-counter' }
          );
        }
      }
      
      // Fetch updated sections
      const body = JSON.stringify({
        sections: sectionsToRender.map(section => section.section),
        sections_url: window.location.pathname
      });
      
      fetch(`${window.routes?.cart_change_url || '/cart/change.js'}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: body
      })
      .then(response => response.text())
      .then(state => {
        const parsedState = JSON.parse(state);
        
        // Update sections
        sectionsToRender.forEach(section => {
          const elementToReplace = document.querySelector(section.selector) || document.querySelector(section.id);
          if (elementToReplace && parsedState.sections && parsedState.sections[section.section]) {
            elementToReplace.innerHTML = getSectionInnerHTML(
              parsedState.sections[section.section],
              section.selector
            );
          }
        });
        
        // Update cart counters
        if (typeof updateCartCounters === 'function') {
          updateCartCounters();
        }
        
        // Update free shipping
        if (typeof updateFreeShipping === 'function') {
          updateFreeShipping();
        }
        
        // Re-initialize discount box after cart update
        setTimeout(initDiscountBox, 100);
      })
      .catch(error => {
        console.error('Error refreshing cart:', error);
        // Fallback to page reload
        if (window.location.pathname.indexOf('/cart') !== -1) {
          window.location.reload();
        }
      });
    }
    
    function getSectionInnerHTML(html, selector) {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }
  }
  
  // Initialize on page load
  initDiscountBox();
  
  // Re-initialize when cart drawer content is updated
  document.addEventListener('cart:updated', initDiscountBox);
})();
</script>

<style>
.discount-box {
  margin-bottom: 1.5rem;
}
.discount-box__label {
  display: block;
  margin-bottom: 0.5rem;
  font-size: 1.3rem;
  font-weight: 500;
  color: #000;
}
.discount-box__input-group {
  display: flex;
  gap: 0.5rem;
}
.discount-box__input {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid #000;
  border-radius: 4px;
  font-size: 1.3rem;
  background: #fff;
  color: #000;
}
.discount-box__input:focus {
  outline: none;
  border-color: #000;
  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
}
.discount-box__button {
  padding: 0.75rem 1rem;
  background: #000;
  color: #fff;
  border: 1px solid #000;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  white-space: nowrap;
  transition: all 0.2s ease;
}
.discount-box__button:hover {
  background: #fff;
  color: #000;
}
.discount-box__button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}
.discount-box__message {
  margin-top: 0.5rem;
  font-size: 0.85rem;
  padding: 0.5rem;
  border-radius: 4px;
}
.discount-box__message--success {
  color: #059669;
  background: #d1fae5;
  border: 1px solid #a7f3d0;
}
.discount-box__message--error {
  color: #dc2626;
  background: #fee2e2;
  border: 1px solid #fecaca;
}
.discount-box.is-loading .discount-box__button {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Applied Discounts Styles */
.discount-box__applied-discounts {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #000;
}

.discount-box__applied-title {
  font-size: 0.9rem;
  font-weight: 500;
  margin: 0 0 0.5rem 0;
  color: #000;
}

.discount-box__applied-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.discount-box__applied-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem;
  background: #f8f8f8;
  border: 1px solid #000;
  border-radius: 4px;
  font-size: 0.85rem;
}

.discount-box__applied-code {
  font-weight: 500;
  color: #000;
}

.discount-box__remove-discount {
  background: none;
  border: none;
  color: #dc2626;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 2px;
  font-size: 1rem;
  line-height: 1;
  transition: background-color 0.2s ease;
}

.discount-box__remove-discount:hover {
  background: rgba(220, 38, 38, 0.1);
}

/* Cart drawer specific applied discounts styles */
.cart-drawer__discount-box .discount-box__applied-title {
  font-size: 0.8rem;
}

.cart-drawer__discount-box .discount-box__applied-item {
  padding: 0.4rem;
  font-size: 0.8rem;
}

.cart-drawer__discount-box .discount-box__remove-discount {
  font-size: 0.9rem;
  padding: 0.2rem;
}

/* Main cart specific applied discounts styles */
.cart__discount-box .discount-box__applied-title {
  font-size: 1rem;
}

.cart__discount-box .discount-box__applied-item {
  padding: 0.6rem;
  font-size: 0.9rem;
}

.cart__discount-box .discount-box__remove-discount {
  font-size: 1.1rem;
  padding: 0.3rem;
}

/* Cart drawer specific styles */
.cart-drawer__discount-box {
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #000;
}
.cart-drawer__discount-box .discount-box__label {
  font-size: 1.25rem;
  margin-bottom: 0.4rem;
}
.cart-drawer__discount-box .discount-box__input {
  padding: 0.6rem;
  font-size: 1.25rem;
}
.cart-drawer__discount-box .discount-box__button {
  padding: 0.6rem 0.8rem;
  font-size: 0.85rem;
}
.cart-drawer__discount-box .discount-box__message {
  font-size: 0.8rem;
  margin-top: 0.4rem;
}

/* Main cart page specific styles */
.cart__discount-box {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #fff;
  border-radius: 8px;
  border: 1px solid #000;
}
.cart__discount-box .discount-box__label {
  font-size: 1.35rem;
  margin-bottom: 0.5rem;
}
.cart__discount-box .discount-box__input {
  padding: 0.75rem;
  font-size: 1.35rem;
}
.cart__discount-box .discount-box__button {
  padding: 0.75rem 1rem;
  font-size: 0.95rem;
}
.cart__discount-box .discount-box__message {
  font-size: 0.9rem;
  margin-top: 0.5rem;
}
</style> 