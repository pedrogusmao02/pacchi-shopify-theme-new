<div class="discount-box{% if class %} {{ class }}{% endif %}">
  <div id="DiscountForm">
    <label for="discount-code" class="discount-box__label">Aplicar código de desconto</label>
    <div class="discount-box__input-group">
      <input type="text" id="discount-code" name="discount" class="discount-box__input" placeholder="Código de desconto" required>
      <button type="button" id="apply-discount-btn" class="discount-box__button">Aplicar</button>
    </div>
    <div id="DiscountMessage" class="discount-box__message" style="display:none; opacity: 0;"></div>
  </div>
  
  <!-- Applied Discounts Display -->
  <div id="AppliedDiscounts" class="discount-box__applied-discounts" style="display:none;">
    <h4 class="discount-box__applied-title">Descontos aplicados:</h4>
    <div id="AppliedDiscountsList" class="discount-box__applied-list"></div>
  </div>
</div>

<script>
(function() {
  function initDiscountBox() {
    var form = document.getElementById('DiscountForm');
    var input = document.getElementById('discount-code');
    var applyBtn = document.getElementById('apply-discount-btn');
    var message = document.getElementById('DiscountMessage');
    var appliedDiscounts = document.getElementById('AppliedDiscounts');
    var appliedDiscountsList = document.getElementById('AppliedDiscountsList');
    
    if (!form || !input || !applyBtn) return;
    
    // Remove existing event listeners
    applyBtn.removeEventListener('click', handleApplyDiscount);
    input.removeEventListener('keypress', handleKeyPress);
    
    // Add event listeners
    applyBtn.addEventListener('click', handleApplyDiscount);
    input.addEventListener('keypress', handleKeyPress);
    
    // Load current applied discounts
    loadAppliedDiscounts();
    
    function handleKeyPress(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        handleApplyDiscount();
      }
    }
    
    function handleApplyDiscount() {
      var code = input.value.trim();
      if (!code) return;
      
      console.log('Applying discount code:', code); // Debug log
      
      message.style.display = 'none';
      message.textContent = '';
      form.classList.add('is-loading');
      
      console.log('Sending request to /cart/update.js with:', { discount: code }); // Debug log
      
      fetch('/cart/update.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify({ discount: code })
      })
      .then(function(res) { 
        if (!res.ok) {
          throw new Error('Network response was not ok');
        }
        return res.json(); 
      })
      .then(function(data) {
        console.log('Cart update response:', data); // Debug log
        
        // Check if the response indicates an error
        if (data.status && data.status !== 200) {
          throw new Error(data.description || data.message || 'Error applying discount');
        }
        
        // Check if discount was actually applied by looking for discount applications
        let discountApplied = false;
        
        // Check cart_level_discount_applications
        if (data.cart_level_discount_applications && data.cart_level_discount_applications.length > 0) {
          discountApplied = true;
        }
        // Check discount_codes
        else if (data.discount_codes && data.discount_codes.length > 0) {
          discountApplied = true;
        }
        // Check if any items have discounts
        else if (data.items && data.items.length > 0) {
          data.items.forEach(item => {
            if (item.discounts && item.discounts.length > 0) {
              discountApplied = true;
            }
          });
        }
        
        if (discountApplied) {
          // Discount was successfully applied
          message.textContent = 'Desconto aplicado!';
          message.style.display = 'block';
          message.className = 'discount-box__message discount-box__message--success';
          
          // Clear input
          input.value = '';
          
          // Refresh cart and applied discounts
          refreshCart();
        } else {
          // No discount was applied - show error
          message.textContent = 'Código de desconto inválido ou não aplicável.';
          message.style.display = 'block';
          message.className = 'discount-box__message discount-box__message--error';
        }
      })
      .catch(function(err) {
        message.textContent = err.message || 'Não foi possível aplicar o desconto.';
        message.style.display = 'block';
        message.className = 'discount-box__message discount-box__message--error';
      })
      .finally(function() {
        form.classList.remove('is-loading');
      });
    }
    
    function loadAppliedDiscounts() {
      console.log('Loading applied discounts...'); // Debug log
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          console.log('=== FULL CART OBJECT ===');
          console.log(JSON.stringify(cart, null, 2));
          console.log('=== END CART OBJECT ===');
          console.log('Cart level discount applications:', cart.cart_level_discount_applications); // Debug log
          console.log('Discount codes:', cart.discount_codes); // Debug log
          
          // Check for applied discounts in multiple places
          let appliedDiscounts = [];
          
          // First check cart_level_discount_applications
          if (cart.cart_level_discount_applications && cart.cart_level_discount_applications.length > 0) {
            appliedDiscounts = cart.cart_level_discount_applications;
          }
          // Then check discount_codes
          else if (cart.discount_codes && cart.discount_codes.length > 0) {
            appliedDiscounts = cart.discount_codes.map(discount => ({
              title: discount.code,
              type: 'discount_code'
            }));
          }
          // Finally check if any items have discounts
          else if (cart.items && cart.items.length > 0) {
            const itemDiscounts = new Set();
            cart.items.forEach(item => {
              if (item.discounts && item.discounts.length > 0) {
                item.discounts.forEach(discount => {
                  itemDiscounts.add(discount.title);
                });
              }
            });
            if (itemDiscounts.size > 0) {
              appliedDiscounts = Array.from(itemDiscounts).map(title => ({
                title: title,
                type: 'discount_code'
              }));
            }
          }
          
          if (appliedDiscounts.length > 0) {
            console.log('Found applied discounts, displaying them...'); // Debug log
            displayAppliedDiscounts(appliedDiscounts);
          } else {
            console.log('No applied discounts found, hiding display...'); // Debug log
            hideAppliedDiscounts();
          }
        })
        .catch(error => {
          console.error('Error loading applied discounts:', error);
        });
    }
    
    function displayAppliedDiscounts(discounts) {
      console.log('Displaying discounts:', discounts); // Debug log
      console.log('Applied discounts container:', appliedDiscounts); // Debug log
      console.log('Applied discounts list:', appliedDiscountsList); // Debug log
      
      appliedDiscountsList.innerHTML = '';
      
      discounts.forEach(discount => {
        console.log('Creating discount item for:', discount.title); // Debug log
        const discountItem = document.createElement('div');
        discountItem.className = 'discount-box__applied-item';
        discountItem.innerHTML = `
          <span class="discount-box__applied-code">${discount.title}</span>
          <button type="button" class="discount-box__remove-discount" data-discount-code="${discount.title}">×</button>
        `;
        
        // Add remove event listener
        const removeBtn = discountItem.querySelector('.discount-box__remove-discount');
        removeBtn.addEventListener('click', function() {
          removeDiscount(discount.title);
        });
        
        appliedDiscountsList.appendChild(discountItem);
      });
      
      appliedDiscounts.style.display = 'block';
      console.log('Applied discounts display set to block'); // Debug log
    }
    
    function hideAppliedDiscounts() {
      appliedDiscounts.style.display = 'none';
    }
    
    function removeDiscount(discountCode) {
      console.log('Removing discount:', discountCode); // Debug log
      
      // Remove discount by setting it to empty string
      fetch('/cart/update.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify({ discount: '' })
      })
      .then(function(res) { 
        if (!res.ok) {
          throw new Error('Network response was not ok');
        }
        return res.json(); 
      })
      .then(function(data) {
        console.log('Remove discount response:', data); // Debug log
        
        if (data.status && data.status !== 200) {
          throw new Error(data.description || data.message || 'Error removing discount');
        }
        
        // Check if discount was actually removed
        let discountRemoved = true;
        
        // Check if any discounts are still present
        if (data.cart_level_discount_applications && data.cart_level_discount_applications.length > 0) {
          discountRemoved = false;
        }
        else if (data.discount_codes && data.discount_codes.length > 0) {
          discountRemoved = false;
        }
        else if (data.items && data.items.length > 0) {
          data.items.forEach(item => {
            if (item.discounts && item.discounts.length > 0) {
              discountRemoved = false;
            }
          });
        }
        
        if (discountRemoved) {
          // Refresh cart and applied discounts
          refreshCart();
        } else {
          console.error('Discount was not removed properly');
          message.textContent = 'Erro ao remover desconto.';
          message.style.display = 'block';
          message.className = 'discount-box__message discount-box__message--error';
        }
      })
      .catch(function(error) {
        console.error('Error removing discount:', error);
        message.textContent = 'Erro ao remover desconto.';
        message.style.display = 'block';
        message.className = 'discount-box__message discount-box__message--error';
      });
    }
    
    function refreshCart() {
      console.log('Refreshing cart...'); // Debug log
      
      // Update cart counters and free shipping immediately
      if (typeof updateCartCounters === 'function') {
        updateCartCounters();
      }
      if (typeof updateFreeShipping === 'function') {
        updateFreeShipping();
      }
      
      // For cart drawer, trigger a reload to ensure all prices update
      const cartDrawer = document.querySelector('cart-drawer');
      if (cartDrawer && cartDrawer.classList.contains('is-visible')) {
        console.log('Cart drawer is open, triggering reload...'); // Debug log
        
        // Close and reopen the cart drawer to refresh content
        cartDrawer.close();
        setTimeout(() => {
          // Reopen the cart drawer
          const cartLink = document.querySelector("[data-cart-link]");
          if (cartLink) {
            cartLink.click();
          }
        }, 100);
      }
      
      // Re-initialize discount box after a short delay
      setTimeout(initDiscountBox, 200);
    }
    
    function fallbackCartRefresh() {
      console.log('Using fallback cart refresh...'); // Debug log
      
      // Simple approach: just reload the cart data and update the display
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          console.log('Updated cart data:', cart); // Debug log
          
          // Update cart counters if function exists
          if (typeof updateCartCounters === 'function') {
            updateCartCounters();
          }
          
          // Update free shipping if function exists
          if (typeof updateFreeShipping === 'function') {
            updateFreeShipping();
          }
          
          // Update applied discounts display
          let appliedDiscounts = [];
          
          // First check cart_level_discount_applications
          if (cart.cart_level_discount_applications && cart.cart_level_discount_applications.length > 0) {
            appliedDiscounts = cart.cart_level_discount_applications;
          }
          // Then check discount_codes
          else if (cart.discount_codes && cart.discount_codes.length > 0) {
            appliedDiscounts = cart.discount_codes.map(discount => ({
              title: discount.code,
              type: 'discount_code'
            }));
          }
          // Finally check if any items have discounts
          else if (cart.items && cart.items.length > 0) {
            const itemDiscounts = new Set();
            cart.items.forEach(item => {
              if (item.discounts && item.discounts.length > 0) {
                item.discounts.forEach(discount => {
                  itemDiscounts.add(discount.title);
                });
              }
            });
            if (itemDiscounts.size > 0) {
              appliedDiscounts = Array.from(itemDiscounts).map(title => ({
                title: title,
                type: 'discount_code'
              }));
            }
          }
          
          if (appliedDiscounts.length > 0) {
            displayAppliedDiscounts(appliedDiscounts);
            // Hide success message after showing applied discounts
            setTimeout(() => {
              message.style.display = 'none';
            }, 2000);
          } else {
            hideAppliedDiscounts();
            // Show error message if no discount was actually applied
            message.textContent = 'Código de desconto inválido ou não aplicável.';
            message.style.display = 'block';
            message.className = 'discount-box__message discount-box__message--error';
          }
          
          // If we're on cart page, reload the page to show updated totals
          if (window.location.pathname.indexOf('/cart') !== -1) {
            window.location.reload();
          }
        })
        .catch(error => {
          console.error('Error refreshing cart:', error);
        });
    }
    
    function getSectionInnerHTML(html, selector) {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }
    

  }
  
  // Initialize on page load
  initDiscountBox();
  
  // Re-initialize when cart drawer content is updated
  document.addEventListener('cart:updated', initDiscountBox);
  
  // Also listen for cart drawer open events to ensure discounts are loaded
  document.addEventListener('cart-drawer:opened', initDiscountBox);
  
  // Listen for any cart changes to reload applied discounts
  document.addEventListener('cart:change', function() {
    setTimeout(initDiscountBox, 100); // Small delay to ensure cart data is updated
  });
  
  // Also run on DOMContentLoaded to ensure it loads when the page is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDiscountBox);
  }
})();
</script>

<style>
.discount-box {
  margin-bottom: 1.5rem;
}
.discount-box__label {
  display: block;
  margin-bottom: 0.5rem;
  font-size: 1.3rem;
  font-weight: 500;
  color: #000;
}
.discount-box__input-group {
  display: flex;
  gap: 0.5rem;
}
.discount-box__input {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid #000;
  border-radius: 4px;
  font-size: 1.3rem;
  background: #fff;
  color: #000;
}
.discount-box__input:focus {
  outline: none;
  border-color: #000;
  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
}
.discount-box__button {
  padding: 0.75rem 1rem;
  background: #000;
  color: #fff;
  border: 1px solid #000;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  white-space: nowrap;
  transition: all 0.2s ease;
}
.discount-box__button:hover {
  background: #fff;
  color: #000;
}
.discount-box__button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}
.discount-box__message {
  margin-top: 0.5rem;
  font-size: 1.25rem;
  padding: 0.5rem;
  border-radius: 4px;
}
.discount-box__message--success {
  color: #059669;
  background: #d1fae5;
  border: 1px solid #a7f3d0;
}
.discount-box__message--error {
  color: #dc2626;
  background: #fee2e2;
  border: 1px solid #fecaca;
}
.discount-box.is-loading .discount-box__button {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Applied Discounts Styles */
.discount-box__applied-discounts {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #000;
}

.discount-box__applied-title {
  font-size: 0.9rem;
  font-weight: 500;
  margin: 0 0 0.5rem 0;
  color: #000;
}

.discount-box__applied-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.discount-box__applied-item {
  display: inline-flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem;
  background: #f8f8f8;
  border: 1px solid #000;
  border-radius: 4px;
  font-size: 1.25rem;
  width: fit-content;
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
}

.discount-box__applied-code {
  font-weight: 500;
  color: #000;
}

.discount-box__remove-discount {
  background: none;
  border: none;
  color: #dc2626;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 2px;
  font-size: 1rem;
  line-height: 1;
  transition: background-color 0.2s ease;
}

.discount-box__remove-discount:hover {
  background: rgba(220, 38, 38, 0.1);
}

/* Cart drawer specific applied discounts styles */
.cart-drawer__discount-box .discount-box__applied-title {
  font-size: 1.2rem;
}

.cart-drawer__discount-box .discount-box__applied-item {
  padding: 0.4rem;
  font-size: 1.2rem;
}

.cart-drawer__discount-box .discount-box__remove-discount {
  font-size: 0.9rem;
  padding: 0.2rem;
}

/* Main cart specific applied discounts styles */
.cart__discount-box .discount-box__applied-title {
  font-size: 1.4rem;
}

.cart__discount-box .discount-box__applied-item {
  padding: 0.6rem;
  font-size: 1.4rem;
}

.cart__discount-box .discount-box__remove-discount {
  font-size: 1.1rem;
  padding: 0.3rem;
}

/* Cart drawer specific styles */
.cart-drawer__discount-box {
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #000;
}
.cart-drawer__discount-box .discount-box__label {
  font-size: 1.25rem;
  margin-bottom: 0.4rem;
}
.cart-drawer__discount-box .discount-box__input {
  padding: 0.6rem;
  font-size: 1.25rem;
}
.cart-drawer__discount-box .discount-box__button {
  padding: 0.6rem 0.8rem;
  font-size: 0.85rem;
}
.cart-drawer__discount-box .discount-box__message {
  font-size: 0.8rem;
  margin-top: 0.4rem;
}

/* Main cart page specific styles */
.cart__discount-box {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #fff;
  border-radius: 8px;
  border: 1px solid #000;
}
.cart__discount-box .discount-box__label {
  font-size: 1.35rem;
  margin-bottom: 0.5rem;
}
.cart__discount-box .discount-box__input {
  padding: 0.75rem;
  font-size: 1.35rem;
}
.cart__discount-box .discount-box__button {
  padding: 0.75rem 1rem;
  font-size: 0.95rem;
}
.cart__discount-box .discount-box__message {
  font-size: 0.9rem;
  margin-top: 0.5rem;
}
</style> 